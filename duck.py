
#!/usr/bin/env python

# duck generator

import math
from math import pi
import stlwrite
import csg

PI = math.pi

def frange(x, maximum, step):
    while x < maximum:
        yield x
        
        x += step

def isequal(p1,p2):
    if (abs(p1[0]-p2[0]) <= 1e-5 and abs(p1[1]-p2[1]) <= 1e-5 and abs(p1[2]-p2[2]) <= 1e-5):
        return False
    else:
        return True
    
def get_ellipsoid(A,B,C,x0,y0,z0):
    faces = []
    thetaStep = PI/8
    phiStep = PI/16
    for phi in frange(-PI/2, PI/2, phiStep):
        for theta in frange(0, 2*PI, thetaStep):
            p1 = (x0 + A * math.cos(theta)* math.cos(phi), y0 + B * math.sin(theta)* math.cos(phi), z0 + C * math.sin(phi))

            p3 = (x0 + A * math.cos(theta+thetaStep)* math.cos(phi+phiStep), y0 + B * math.sin(theta+thetaStep)* math.cos(phi+phiStep), z0 + C * math.sin(phi+phiStep))

            p4 = (x0 + A * math.cos(theta)* math.cos(phi+phiStep), y0 + B * math.sin(theta)* math.cos(phi+phiStep), z0 + C * math.sin(phi+phiStep))

            p2 = (x0 + A * math.cos(theta+thetaStep)* math.cos(phi), y0 + B * math.sin(theta+thetaStep)* math.cos(phi), z0 + C * math.sin(phi))

            bool1 = isequal(p1, p2)
            bool2 = isequal(p1, p3)
            bool3 = isequal(p1, p4)
            bool4 = isequal(p2, p3)
            bool5 = isequal(p2, p4)
            bool6 = isequal(p3, p4)

            if all([bool1, bool2, bool3, bool4, bool5, bool6]):
                faces.append([p1, p2, p3, p4])
            elif all([bool1, bool2, bool4]):
                faces.append([p1, p2, p3])
            elif all([bool1, bool3, bool5]):
                faces.append([p1, p2, p4])
            elif all([bool2, bool3, bool6]):
                faces.append([p1, p3, p4])
            elif all([bool4, bool5, bool6]):
                faces.append([p2, p3, p4])
    return faces

def get_duck_features():
    """Return a list of body parts. Each body part is a list of faces
        (quads or triangles) generated by get_ellipsoid().  So the result is
        a list of lists of faces.
    """
    beak = get_ellipsoid(0.4, 1, 0.2, 0, -0.3*PI, 0.5*PI)
    head = get_ellipsoid(1, 1.2, 1, 0, 0, 0.5*PI)
    left_eye = get_ellipsoid(0.15, 0.2, 0.15, 0.23*PI, -0.15*PI, 0.62*PI)
    right_eye = get_ellipsoid(0.15, 0.2, 0.15, -0.23*PI, -0.15*PI, 0.62*PI)
    neck = get_ellipsoid(0.75, 0.75, 1, 0, 0.5, 0.5)
    body = get_ellipsoid(2, 3, 1.2, 0, 0.75*PI, 0)
    left_wing = get_ellipsoid(0.2, 1.4, 0.6, 0.56*PI, 0.8*PI, 0)
    right_wing = get_ellipsoid(0.2, 1.4, 0.6, -0.56*PI, 0.8*PI, 0)
    tail = get_ellipsoid(0.8, 1.4, 0.2, 0, 1.4*PI, 0.1*PI)
    elvis_Tophair = get_ellipsoid(1,1.2,0.5,0,-0.5,2.5)
    elvis_Backhair = get_ellipsoid(1,0.6,0.9,0,0.2*PI, 2)
    body_parts = [beak, head, left_eye, right_eye, neck, body, left_wing, right_wing, tail, elvis_Tophair,elvis_Backhair]
    return body_parts

def write_simple_duck():
    parts = get_duck_features()
    # Put all the faces together in one big list.
    faces = []
    for part in parts:
        faces.extend(part)
    # Write the list as an STL file
    filename = "simple_duck.stl"
    with open(filename, 'wb') as fp:
        writer = stlwrite.ASCII_STL_Writer(fp)
        writer.add_faces(faces)
        writer.close()
    print("Wrote " + filename)
    
def write_good_duck():
    filename = "duck_union.stl"
    # Do a mesh union of all the body parts
    body_parts = get_duck_features()
    good_mesh = csg.union_all(body_parts)
    good_mesh.saveSTL(filename, binary=False)

if __name__ == '__main__':
    write_simple_duck()

